{"headers":[{"key":"hpSet","value":0,"style":"boolean"}],"items":[{"key":"hp","value":40,"style":"number","css":"o"},{"key":"prevHp","value":40,"style":"number"},{"key":"pushed","css":"pushed_img","style":"boolean","value":""},{"key":"right","value":0,"style":"boolean","css":"o2","repeatChar":"◯,"}],"priority":[{"key":"status","order":"desc","alter":["win",2,"lose",0,1]},{"key":"hp","order":"desc"},{"key":"prevHp","order":"desc"}],"actions":[{"name":"○","css":"action_o","button_css":"btn btn-primary btn-lg","keyArray":"k1","enable0":"return (player.status == 'normal' && !header.playoff);","action0":"player.right = ! player.right;"},{"name":"p","css":"action_s","button_css":"btn btn-info btn-lg","keyArray":"k2","tweet":"right","enable0":"return (player.status == 'normal' && !header.playoff);","action0":"players.map(function(p) {\n  if (p == player) {\n    p.pushed = !p.pushed;\n  } else {\n    p.pushed = false;\n  }\n})"}],"global_actions":[{"name":"thru","button_css":"btn btn-default","group":"rule","keyboard":"Space","tweet":"thru","enable0":"return true;","action0":"// ボード正解/不正解/スルーボード判定\nvar pushPattern;\nvar pushPlayers = players.filter(function(p) {\n  return p.pushed;\n});\nif (pushPlayers.length === 0) {\n  // スルーボード\n  pushPattern = 2;\n} else {\n  if (pushPlayers[0].right) {\n    pushPattern = 0;\n  } else {\n    pushPattern = 1;\n  }\n}\n\n// 点数計算\nplayers.filter(function(p) {\n  return p.status == \"normal\";\n}).map(function(p) {\n  p.prevHp = p.hp;\n  if (p.pushed) {\n    if (p.right) {\n      p.hp += property.hpDiv[0][0];\n    } else {\n      p.hp += property.hpDiv[0][1];\n    }\n  } else {\n    if (p.right) {\n      p.hp += property.hpDiv[1][pushPattern][0];\n    } else {\n      p.hp += property.hpDiv[1][pushPattern][1];\n    }\n  }\n});\n\n// Twitter表示用文字列\nheader.rightAnswerPlayers = \"\";\n// 早押し結果\nswitch (pushPattern) {\n  case 0:\n    header.rightAnswerPlayers += pushPlayers[0].handleName + \": 早押し正解\"\n    break;\n  case 1:\n    header.rightAnswerPlayers += pushPlayers[0].handleName + \": 早押し誤答\"\n    break;\n  case 2:\n    header.rightAnswerPlayers += \"スルーボード\";\n    break;\n}\n// ボード正解者\nvar boardRightAnswerPlayers = players.filter(function(p) {\n  return !p.pushed && p.right;\n});\nif (boardRightAnswerPlayers.length === 0) {\n  header.rightAnswerPlayers += \"\\nボード正解者なし\"\n} else {\n  header.rightAnswerPlayers += \"\\nボード正解者: \" + boardRightAnswerPlayers.map(function(p) {\n    return p.handleName;\n  }).join(',');\n}\n\n// 初期化\nplayers.map(function(p) {\n  p.pushed = false;\n  p.right = false;\n});\n\naddQCount(players, header, property);"}],"global_actions_repeat":[],"tweet":{"thru":"${rightAnswerPlayers}","right":"解答権：${handleName}"},"judgement":"angular.forEach(players.filter(function(item) {\n  /* rankがない人に限定 */\n  return (item.rank === 0);\n}), function(player, i) {\n  /* win条件 */\n  /* lose条件 */\n});","calc":"angular.forEach(players, function(player, index) {\n  // pinch, chance\n  player.pinch = false;\n  player.chance = false;\n\n  // hp初期値を設定\n  if (!header.hpSet) {\n    header.hpSet = true;\n    // 最小pts\n    var minPts = Math.min.apply(null, players.map(function(p) {\n      return p.pts;\n    }));\n    // hp初期値を設定\n    players.map(function(p) {\n      console.log(p.pts, minPts, property.minHp);\n      p.hp = p.pts - minPts + property.minHp;\n    })\n  }\n\n  // キーボード入力時の配列の紐付け ローリング等の特殊形式でない場合はこのままでOK\\\n  player.keyIndex = player.position;\n  player.line = \"line1\";\n\n});","lines":[{"key":"line1","xType":true,"yType":false,"invisible":false,"zoom":1,"left":0,"right":1,"top":0,"y":0.5,"orderBy":"position"}]}