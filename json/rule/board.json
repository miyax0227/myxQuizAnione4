{"headers":[],"items":[{"key":"right","value":0,"style":"boolean"},{"key":"pts","value":0,"style":"number","css":"pts"},{"key":"rightName","css":"upper"}],"priority":[{"key":"status","order":"desc","alter":["win",2,"lose",0,1]},{"key":"pts","order":"desc"}],"actions":[{"name":"○","css":"action_o","button_css":"btn btn-primary btn-lg","keyArray":"k1","enable0":"return (player.status == 'normal' && !header.playoff);","action0":"player.right = ! player.right;"}],"global_actions":[{"name":"thru","button_css":"btn btn-default","group":"rule","keyboard":"Space","tweet":"thru","enable0":"return true;","action0":"// 正答者数からポイント計算\nvar rightPts = 1;\nvar rightCount = players.filter(function(p) {\n  return p.right;\n}).length;\n\nif (angular.isArray(property.rightPts)) {\n  var rightPtsSelect = property.rightPts.filter(function(rp) {\n    console.log(rp.min, rp.max, rightCount);\n    return rp.min <= rightCount && rightCount <= rp.max;\n  });\n  if (rightPtsSelect.length >= 1) {\n    rightPts = rightPtsSelect[0].pts;\n  }\n}\n// Twitter表示用文字列\nif (rightCount === 0) {\n  header.rightAnswerPlayers = \"正解者なし\";\n} else if (rightCount == 1) {\n  header.rightAnswerPlayers = \"単独正解：\" + players.filter(function(p) {\n    return p.right;\n  })[0].handleName;\n} else {\n  header.rightAnswerPlayers = \"正解：\" + players.filter(function(p) {\n    return p.right;\n  }).map(function(p) {\n    return p.handleName;\n  }).join(',');\n}\n// ポイント加算\nplayers.filter(function(p) {\n  return p.right;\n}).map(function(p) {\n  p.pts += rightPts;\n  p.right = false;\n});\n\naddQCount(players, header, property);"}],"global_actions_repeat":[],"tweet":{"thru":"${rightAnswerPlayers}"},"judgement":"angular.forEach(players.filter(function(item) {\n  /* rankがない人に限定 */\n  return (item.rank === 0);\n}), function(player, i) {\n  /* win条件 */\n  /* lose条件 */\n});","calc":"angular.forEach(players, function(player, index) {\n  // pinch, chance\n  player.pinch = false;\n  player.chance = false;\n  \n  // nameLatの設定\n  player.nameLat = player.name;\n  player.handleNameLat = player.handleName;\n  \n  //rightName\n  if (player.right) {\n    player.rightName = \"○\";\n  } else {\n    player.rightName = \"\";\n  }\n\n  // キーボード入力時の配列の紐付け ローリング等の特殊形式でない場合はこのままでOK\\\n  player.keyIndex = player.position;\n  player.line = \"line1\";\n  if (angular.isArray(property.lineArray)) {\n    property.lineArray.map(function(la) {\n      if (la.min <= index + 1 && index + 1 <= la.max) {\n        player.line = la.line;\n      }\n    })\n  }\n\n});","lines":[{"key":"line1","xType":true,"yType":false,"invisible":false,"zoom":0.45,"left":0,"right":1,"top":0,"y":0.3,"orderBy":"position"},{"key":"line2","orderBy":"position","xType":true,"yType":false,"invisible":false,"zoom":0.45,"left":0,"right":1,"y":0.6}]}